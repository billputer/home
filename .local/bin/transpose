#!/usr/bin/env perl

use strict;
use warnings;
use 5.8.0;

# This script is adapted from Rentrak's transpose utility function with
# generous adaptations from tableize. It operates string-wise instead of
# array/hash-wise as the original did.

print transpose(<>);

sub transpose
{
    my (@lines) = @_;

    my @original_table;
    my $num_columns_in_first_line;
    my $delimiter;
    my $leading_whitespace_on_first_line;

    for my $i (0 .. ((scalar @lines) - 1)) {
        my $line = $lines[$i];

        die "Refusing to transpose a blank line at $1!" if is_blank($line);
        die "Refusing to transpose a comment at $1!" if is_comment($line);

        my @columns = get_columns($line);
        @columns = consolidate_columns(@columns);

        # Mixed up delimiters probably indicates bad input anyways; we
        # expect a pretty rigidly well formed table
        if ($delimiter) {
            die "Inconsistent table delimiter found on line $i!"
                unless $delimiter eq $columns[1];
        } else {
            die "Unrecognized or non-existent delimiter begins line $i!"
                unless $columns[1] =~ /^[[{(<]$/;
            $delimiter = $columns[1];
        }
        my $expected_end_delimiter = end_delimiter($delimiter);
        die "Unrecognized or non-existent table delimiter ends line $i!"
            unless $columns[-1] =~ /^$expected_end_delimiter,$/;

        # Ditto for indentation levels
        if ($leading_whitespace_on_first_line) {
            die "Inconsistent indentation level found on line $i!"
                unless ($columns[0] || '') eq $leading_whitespace_on_first_line;
        } else {
            $leading_whitespace_on_first_line = $columns[0] || '';
        }

        # Ditto
        if ($num_columns_in_first_line) {
            scalar @columns == $num_columns_in_first_line
                or die "Cannot transpose: Different number of columns at line $i";
        } else {
            $num_columns_in_first_line = scalar @columns;
        }

        $original_table[$i] = [ @columns ];
    }

    # Skip leading whitespace and delimiters in transposed table for now
    my @transposed_table;
    for my $i (2 .. ($num_columns_in_first_line - 2)) {
        push @transposed_table, [ map { $_->[$i] } @original_table ];
    }

    # Add back in leading whitespace, delimiters, and ending comma
    my $string = '';
    for my $row (@transposed_table) {
        $string .= $leading_whitespace_on_first_line;
        $string .= join(" ", $delimiter, @$row, end_delimiter($delimiter) . "," );
        $string .= "\n";
    }
    return $string;
}

sub consolidate_columns
{
    my (@columns) = @_;

    my $qw_delim = '';
    my $curr_idx = 0;
    while($curr_idx < $#columns) {
        my $next_idx = $curr_idx + 1;
        my $curr = $columns[$curr_idx];
        my $next = $columns[$next_idx];

        # Fat commas (arrows) usually won't make sense when transposed;
        # Perl treats commas and fat commas mostly identically, so I
        # convert them here to commas and make sure the key is wrapped
        # in quotes if it isn't (keys are implicitly strings in Perl).
        if ($next =~ /^=>$/) {
            $columns[$next_idx] =~ s/^=>$/,/;
            $columns[$curr_idx] = "'" . (strip_quote_like($curr) || $curr) . "'";
        }

        if($curr =~ /^qw(.)$/) {
            $qw_delim = end_delimiter($1);
        }

        if($next eq $qw_delim) {
            $qw_delim = '';
            $columns[$curr_idx] .= splice(@columns, $next_idx, 1);
        }
        elsif(should_join_with_next_column(\@columns, $curr_idx)) {
            $columns[$curr_idx] .= splice(@columns, $next_idx, 1);
        }
        else {
            $curr_idx++
        }
    }

    return @columns;
}

sub should_join_with_next_column
{
    my ($columns, $idx) = @_;

    my $curr = $columns->[$idx];
    my $next = $columns->[$idx+1];
    return unless defined $next;

    return 1 if $next =~ /^[)>\]}]? , $/x;
    return 1 if $curr =~ /^qw.$/;
    return 0;
}

sub get_columns
{
    my ($line) = @_;
    my ($initial_whitespace) = ($line =~ /^(\s*)/);
    return ($initial_whitespace, split_line($line));
}

sub split_line
{
    my ($line) = @_;

    my $separators = qr{ qw\(| => | [,\[\]{}] }x;
    my $arithmetic_chars = qr{ [- \d * / () + ] }x;

    my @columns;
    while (! is_blank($line)) {
        $line = trim($line);
        if(my $col = strip_quote_like($line)) {
            push @columns, $col;
        }
        elsif ($line =~ s/^\\\(my\s*\$(\w+)\s*\)//) {
            push @columns, "\\(my \$$1)";
        }
        elsif ($line =~ s/^((['"]).*?\2)//) {
            push @columns, $1;
        }
        elsif ($line =~ s/^($separators)//) {
            push @columns, $1;
        }
        elsif ($line =~ s/^($arithmetic_chars(?: |$arithmetic_chars)+?)($separators|$)/$2/) {
            push @columns, $1;
        }
        elsif ($line =~ s/^\s*(\w+\([^\)]*\))//) {
            push @columns, $1;
        }
        elsif ($line =~ s/^(\S+?)(,|\s+$separators|\s|$)/$2/) {
            push @columns, $1;
        }
        else {
            die "Don't know what to make of '$line'";
        }
    }
    return map { trim($_) } @columns;
}

sub end_delimiter
{
    my ($delimiter) = @_;

    my %braces = (
        '['     => ']',
        '{'     => '}',
        '<'     => '>',
        '('     => ')',
    );

    return $braces{$delimiter} || $delimiter;
}

sub strip_quote_like
{
    my $quote_likes = sprintf "(?:%s)", join('|', qw(qq qx qr q));
    $quote_likes = qr/$quote_likes/;

    return unless $_[0] =~ /^(${quote_likes})\s*(\W)/;
    my $quote_like = $1;
    my $delim = $2;

    my $right_delim = end_delimiter($delim);
    return unless $_[0] =~ s{^(
                               \Q$quote_like\E
                               \Q${delim}\E
                               .*?
                               \Q${right_delim}\E
                              )
                            }{}x;
    return $1;
}

sub trim
{
    my ($string) = @_;
    return '' unless defined $string;
    $string =~ s/\s*$//;
    $string =~ s/^\s*//;
    return $string;
}

sub is_blank
{
    my ($string) = @_;
    return 1 if ! defined($string);
    return 1 if $string =~ /^\s*$/;
    return 0;
}

sub is_comment
{
    my ($string) = @_;
    return 0 if ! defined($string);
    return 1 if $string =~ /^\s*#.*$/;
    return 0;
}
